  Tällöin myös käyttäjän identiteetin OpenID-tunniste muuttuu, jos siinä on käytetty lopettaneen yrityksen käytöstä poistuvaa verkkotunnusta. Lukuisat OpenID-identiteetintarjoajat mahdollistavat oman verkkotunnuksen käytön OpenID-tunnisteessa -- esimerkiksi Google Apps ja Yahoo!. Jos identiteetintarjoaja ei suoraan mahdollista oman verkkotunnuksen käyttöä, se voi silti olla mahdollista OpenID-delegoinnilla.




lue ja viittaa myös http://wiki.openid.net/w/page/12995200/OpenID%20Security%20Best%20Practices

XRDS Discovery https://sites.google.com/site/oauthgoog/fedlogininterp/openiddiscovery

email address discovery: http://hueniverse.com/2009/10/email-addresses-as-openids/

openid nascar problem (haluaa nähdä vain googlen logon):
http://factoryjoe.com/blog/2009/04/06/does-openid-need-to-be-hard/


\subsubsection{XRI ja Directed Identity} % (fold)
\label{ssub:xri_ja_directed_identity}

Current speciﬁcation of OpenID [1] states that an OpenID
identiﬁer is either a ”http” or ”https” URI [...] , or an XRI.
We classiﬁed only http and https identiﬁers, ignoring XRI.
The reasons are that almost nobody uses XRI, there is not
support in current browsers to resolve XRI and there is not
a standard way to get a HTML document from them.
-- A survey on OpenID identiﬁers


XRI on yhdentyyppinen URI. XRI on URN-tyypin skeema?



XRDS service links are all related to the OpenID protocol, despite XRDS
supports discovery of other types of services. Beyond authentication, OpenID
Simple Registration Extension and OpenID Attribute Exchange are popular
OpenID extensions supported by collected identiﬁers. They are followed by
provider policy authentication extensions (PAPE), which assert policies
applied by identity providers in order to assure end user authentication.
The most popular is phishing-resistant policies. The rest of services are
less common. \cite{openid_identifier_survey_2011}



 The premise of OpenID 1.x was that users would share one
  globally unique URL (or one of a presumably small set of URLs)
  with RPs. This stood in stark contrast to other Internet identity
  frameworks such as Liberty Alliance ID-WSF and Information
  Cards, which go to great lengths to use pairwise identifiers so
  they introduce no new correlation handles at the protocol level.
      OpenID Authentication 2.0 addressed this issue by adding support
  for “directed identity”—a term for the use of pairwise-unique
  identifiers coined by Microsoft Chief Identity Architect Kim
  Cameron [23]. This was accomplished by adding the new service
  endpoint type “http://specs.openid.net/auth/2.0/identifier_select”.
  When a user enters an OpenID identifier resolving to a service
  endpoint of this type (typically by entering the URL or i-name of
  their OpenID provider, rather than their own OpenID identifier),
  the RP knows it must ask the OP for the user’s identifier. The OP
  can then offer the user the choice of using one of their existing
  OpenID identifiers, or having the OP generate a pairwise-unique
  identifier for this specific relationship. In fact the user need not
  know or remember this identifier as the OP can store and
  automatically use it in future logins to the same RP.
      This directed identity feature  works with both URLs and XRIs,
  however by assigning XRI i-numbers in the OP’s own XRI
  delegation space, OPs can take advantage of their persistence and
  security features discussed above.
subsubsection xri_ja_directed_identity (end)

subsubsection openid_autentikoinnin_vaiheet (end)

\subsubsection{Identiteetin delegointi} % (fold)
\label{ssub:identiteetin_delegointi}

Selitetään mahdollisuus kytkeä oma verkkotunnus kolmannen osapuolen identitarjoaan delegoimalla identiteetti.

Käyttäjä --identiteetti--> verkkotunnus --delegointi--> idp jossa login

\begin{verbatim}
  <head>
  <link rel="openid2.provider"
    href="https://openid.stackexchange.com/openid/provider">
  <link rel="openid2.local_id"
    href="https://openid.stackexchange.com/user/a0cd3405-f76e-429e-b935">
  </head>

  todo viite http://blog.stackoverflow.com/2009/01/using-your-own-url-as-your-openid/
\end{verbatim}

Oman verkkotunnuksen hosting pitää olla turvallinen. Delegointia voi muuttaa jos pääsee käsiksi verkkotunnuksen tarjoamaan delegoinnin web-sivuun.
Google ei tästä syystä tue delegointia.
% subsubsection identiteetin_delegointi (end)


Google:
Guide to Running a User Account System
http://goo.gl/R8pMP

subsection openid (end)

\subsection{OpenID Connect} % (fold)
\label{sub:openid_connect}
OpenID Connect: yhdistää tiedon jakamisen (oauth) ja autentikoitumisen (openid)

http://www.webmonkey.com/2010/05/new-openid-connect-proposal-could-solve-many-of-the-social-webs-woes/



Federal Identity, Credentialing, and Access Management % http://www.idmanagement.gov/documents/ICAM_OpenID20Profile.pdf

ks http://stackoverflow.com/questions/3260557/openid-is-the-identifier-url-unique-what-are-the-differences-between-the-ident

subsection openid_connect (end)



-------------


https://openid.net/2011/04/29/a-map-for-openid-abc/


Directed Identity vs Identifier Select
http://willnorris.com/2009/07/openid-directed-identity-identifier-select


------------


Delegation no longer supported. Normaalikäyttäjällä ei ole omaa verkkotunnusta johon sais link-tägit.

OpenID Connect gives you three choices: use an identifier issued by an existing provider, use a provider that provides white-label OpenID services under your domain, or run your own provider. The first and second of these options are reasonable for your average user and the last is for us nerds.
http://www.apparently.me.uk/2010/05/important-changes-in-openid-connect.html


---------

OpenID in its current incarnation failed to get traction because of the anti-pattern of using urls instead of email addresses/usernames not because of a lack of personal information identifiers.
--
What seems to be missing from conversations around OpenID, and from the digital identity conversation in general, is a stated position on what we think online identity should look like in 2020. We should clarify not only the vision for the social web, but why normals should support that vision.

Given that most of the designers/coders/entrepreneurs involved in OpenID come from a similar pedigree, it may be useful to take a step back and consider the assumptions embedded in the digital details –

why does choice matter? why does privacy matter? why should online interaction mimic the offline world? is the goal to augment or replace offline connections, or are watching the creation of a new category of connection?

In trying to explain the vision for OpenID over the last few months I’ve had a hard time 1) locating it and 2) explaining WHY it matters. We ought to spend as much time on simplicity and clarity of vision as simplicity and clarity of button.
http://factoryjoe.com/blog/2010/05/16/combing-openid-and-oauth-with-openid-connect/


-------

http://seriouslyidentity.com/
http://www.planetidentity.org/


----------

 Microsoft InfoCardsin tavoitteena olla internet-skaalan identiteetin meta-framework. Kuitenkaan ei ole saanut riittävästi jalansijaa ja vaikuttaa kuolevan pois. OpenID + InfoCards toimivat yhteen. Ongelma on, että muille kuin Microsoft Windowsille ei ole kunnollista InfoCards-clienttiä. Kenen intresseissä sellaisen rakentaminen olisi? Entä mobiilissa?


 ----------

 % http://hueniverse.com/2009/04/introducing-sign-in-with-twitter-oauth-style-connect/
 %
 % OpenID is often described as a single-sign-on solution, or “the last username and password you will ever need”. OpenID is a federated authentication protocol – a protocol where users can use credentials from any compatible provider who can “speak” the OpenID protocol. But in this case, not any account will do. Twitter applications need Twitter accounts.
 %
 % It is important to understand that there are two different kind of single-sign-on solutions: delegated and federated. All the recent comparisons between OpenID and Facebook Connect failed to appreciate this fundamental difference. Facebook Connect is a delegated authentication service, while OpenID is a federated authentication service. They might offer very similar features, but they are very different.
 %
 % A delegated solution means that one site is simply outsourcing its authentication needs to another pre-selected site. If your site uses Facebook Connect, you are delegating your authentication facilities to Facebook. Visitors to your site cannot use any other accounts, only accounts from the vendors you have pre-selected.
 %
 % A federated solution means that visitors to your site can use any account they have, as long as it is compatible. It makes no difference to the site which account is being used, as long as it can interoperate. At its core, OpenID is a federated solution because its most important feature is the ability to use any OpenID account with any OpenID-enabled service.
 %
 %A good example is stores accepting credit cards. A store that accepts any Visa card is using federated payments – payments from any account that “speaks Visa”. But a store that accepts only credit cards issued by a specific vendor, for example, a department store branded card, use delegated payments. The reason why you no longer see many stores accepting only their own credit cards, is because it is bad for business.
 %
 % But not every OpenID implementation is federated, and this is the big dilemma OpenID has to resolve.
 %   -- linkki http://hueniverse.com/2009/02/does-openid-have-an-identity-crisis/
 %
 % The question is, can users use any account they want? If a site uses the Yahoo! OpenID service by using the Yahoo! button: xx
 %   but does not offer the ability to use other vendors, it is really just another delegated solution, even if it is powered by OpenID under the hood. In this case, OpenID becomes just a technical detail of the implementation, not part of its design.
 %
 % Much of the recent discussion about OpenID usability centers around using brands as a way to make the service more usable. But the problem with this approach is that is takes away most of the federated value out of OpenID, leaving it simply as a common protocol to implement proprietary delegated services. When implemented this way, OpenID adds no real value to services with an OAuth API.
 %
 % The question which solution to use for sign-in, OpenID or OAuth, is very much application specific. If you are building a brand new site that needs accounts, and want to leverage existing accounts from services such as Google, Yahoo!, and Microsoft, OpenID is a great option that will give your users a lot of flexibility. But if you are extending an existing service, implementing a specific API and building a site that has great dependencies on another service, OAuth gives you everything you need, for very little extra work.
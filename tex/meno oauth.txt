OAuth flow diagram:

http://liveweb.archive.org/http://lists.openid.net/pipermail/openid-specs-ab/Week-of-Mon-20120206/001545.html

OAuth 2.0 diagram:
https://github.com/jricher/OpenID-Connect-Java-Spring-Server/blob/master/docs/OAuth2.0_Diagrams.pdf?raw=true

OpenID Connect diagram:
https://github.com/jricher/OpenID-Connect-Java-Spring-Server/blob/master/docs/OpenID_Connect_Diagrams.pdf?raw=true





% oauth 1.0a:
% oauth_callback: url johon idp ohjaa käyttäjän autentikoinnin/auktorisoinnin jälkeen
% out of band: ei url callbackia, mutta oauth_verifier haaste
% requestToken: poletti joka myönnetään kysyjälle. uudelleenkäytetään auktorisointivaiheessa.
% accessToken: poletti joka myönnetään auktorisointisyklin lopuksi. Toimii käyttäjän myöntämänä valtakirjana: valtakirjaa vastaan annetaan käyttöoikeus käyttäjän resursseihin.
% authorize: Poletin vastaanottamisen jälkeen idp esittää auktorisointisivun jossa käyttäjä sallii/hylkää pääsyoikeuspyynnön
% token secret: merkkijono joka palautetaan requestToken ja accessToken vaiheiden jälkeen, käytetään yhdessä consumer secretin kanssa kun pyyntö allekirjoitetaan
% comsumer key: idc:n api-avain
% consumer secert: idc:n api-salaisuus, jolla kaikki pyynnöt allekirjoitetaan
% oauth_nonce: satunnaismerkkijono, uniikki joka pyynnöllä
% oauth_timestamp: epoch time sekunteina, max synkronisointiero 5? minuuttia idc:n kelloon?
% oauth_token: riippuu kontekstista: joko request token tai access token
% oauth_verifier: idp palauttaa idc:lle oauth_callbackin kutsun yhteydessä, tai käyttäjä syöttää käsin out-of-band flowssa.
%
% kuinka request token rakennetaan? http method, request uri, oauth_callback, oauth_consumer_key, oauth_nonce, oauth_signature_method, oauth_timestamp, oauth_version
% rakennetaan url, urlescape parametrit
% lisätään url http authorization headeriin
% lähetetään endpointtiin
% jos onnistuu, tulee takaisin url encoodattu vastaus, jossa oauth_token, token_secret ja callback_confirmed=true:
%    oauth-token on request token ja token_secretillä allekirjoitetaan pyyntö access_tokenista
%     callback_confirmed -- vapaaehtoinen vai pakollinen? sanoo vain että ok
%     säilytä oauth_token ja token_secret kunness access_token vaihe on valmis.
% -- tämän jälkeen idc:llä on request token ja rakennetaan url auktorisointia varten.
%  auktorisointi url endpoint on idp:llä, queryparametriksi oauth_token, jonka arvo on saatu edellisessä vaiheessa.
% timestamp --> käyttäjän täytyy saapua <=5minuutissa ensimmäisen tokenin myöntämisen jälkeen. idp:llä on jo oauth_callback --> sitä ei enää tartte tässä syöttää.
%
% prepare your signing secret:
% riippumatta käyttääkö callback vai out-of-band: idc:llä on request token, oauth_token_secret ja oauth_verifier. Request token vaihdetaan access_tokeniin, joka esittää valtakirjaa jolla idc saa (valtakirjan mukaiessti) toimia käyttäjän puolesta idp:n myöntämissä resursseissa.
% signing key format: url_escape(consumer_secret)&url_escape(oauth_token_secret)
% ---> rakenna url, lähetä authorisointitiedot http headereissa:
%    oauth_signature, _nonce, _callback, _signature_method, _timestamp, _consumer_key, _token, _verifier, _version
% ---> idp vastaa oauth_token ja oauth_token_secret, idc:n täytyy säilöä molemmat niin kauan aikaa kuin se käyttää valtakirjaa. Käyttäjä voi määritellä myös ajan kauanko valtakirja on voimassa. Käyttäjä voi myös poistaa valtakirjan (revoke token) milloin vain idp:n palvelussa. Myös idc voi omatoimisesti invalidoida tokeninsa.
% Lähde:   http://www.slideshare.net/episod/linkedin-oauth-zero-to-hero

% Jos käyttäjä painaa auktorisointipyyntöön cancel, voidaan palauttaa "integration urliin". Jos tätä ei määritetty, palautus callback_urliin. Tällöin idp ei välitä tokenia tai salaisuutta. Callback urliin lähetetään oauth_problem jonka arvona "user_refused".

% Your servers making requests must be within 5 minutes of our system clock. Timestamps in OAuth are always represented in epoch time in seconds. In any error response LinkedIn sends you, the current timestamp on our servers is included in an XML body of the response. However, at this time the timestamp we send you is in milliseconds, not seconds. It's quite easy to do the math to convert milliseconds to seconds.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Soundcloud OAuth authorization flow diagram
http://developers.soundcloud.com/docs/api/authentication#authorization-code-flow

Twitter OAuth flow diagram
https://dev.twitter.com/docs/auth/oauth

Kerro miksi hueniverse on mainio lähde; blogia pitää yksi oauth-speksin kehittäjistä

auktorisointiluvan kysyminen mobiilissa.

Onko OAuth 2.0 sama REST-palveluille kuin WS-Trust and WS-Security for SOAP -palveluille? (https://www.pingidentity.com/resource-center/oauth-essentials.cfm)

Kaaviokuva / sanallinen dialogi autentikaatiosta ennen oauth1.0, oauth2.0, palvelin-palvelin

ks. Internet-Scale Identity Systems: An Overview and Comparison

Facebook OAuth dialogs: https://developers.facebook.com/docs/reference/dialogs/oauth/

OAuth mahdollistaa http basic autentikoinnin (kpl 2.3.1) ennen auktorisointia.

Draft vaatii HTTPS:n ja brute-force suojauksen:
  ''The authorization server MUST require the use of a transport-layer
   security mechanism when sending requests to the token endpoint, as
   requests using this authentication method result in the transmission
   of clear-text credentials.

   Since this client authentication method involves a password, the
   authorization server MUST protect any endpoint utilizing it against
   brute force attacks.''

Vaatii aina autentikoitumisen (3.2.1. Client Authentication) tietyissä tapauksissa.

Tietomurrosta toipuminen (3.2.1):
''Changing a single set of client credentials is significantly faster than revoking an entire set of refresh tokens.''
''Rotation of an entire set of refresh tokens can be challenging, while rotation of a single set of client credentials is significantly easier.''

9. Native Authentication:
''When choosing between an external or embedded user-agent, developers should consider: [..]''

10. Client Authentication
Hyvä kappale eri tietoturvanäkökulmista ja uhkakuvista.
OAuth ja MITM:
- 10.6.  Authorization Code Redirection URI Manipulation
- 10.9.  Endpoints Authenticity
- 10.11.  Phishing Attacks


OAuth draft kpl 2.1:
OAuth Client Types: confindential/public
OAuth Client Profiles: Web Application, user-agent-based application, native application

Endpointit: kpl3.1
 The authorization endpoint is used to interact with the resource
    owner and obtain an authorization grant.  The authorization server
    MUST first verify the identity of the resource owner.
 Autentikointimenetelmään ei ota kantaa.
 Edellytetään HTTPS:ää (''The authorization server MUST support TLS 1.0 ([RFC2246]), SHOULD support TLS 1.2 ([RFC5246]) and its future'')
 ks. myös 3.1.2.1 HTTPS
http://tools.ietf.org/html/draft-ietf-oauth-v2-22

http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel-01



Erityisesti OAuth 1.0:n aikana
''This has been a sore point from the beginning with people arguing whether OAuth is an authentication protocol or an authorization protocol, with the word ‘delegation’ being used as a compromise. The truth is, OAuth contains both. The redirection-based flow is authorization (with user authentication left intentionally out of scope), and the signature flow is authentication. By separating the two, OAuth becomes more modular and easier to understand.'' http://hueniverse.com/2009/11/planning-for-oauth-2-0/


''Over the past few weeks, we determined that OAuth is now a mature standard with broad participation across the industry. In addition, we have been working with Symantec to identify issues in our authentication flow to ensure that they are more secure. This has led us to conclude that migrating to OAuth \& HTTPs now is in the best interest of our users and developers. (11.5.2011, https://developers.facebook.com/blog/post/497/)''


%%%%%%%%%%%%%%%%%%%%

% linkedin oauth 1.0a flow: https://developer.linkedin.com/documents/oauth-overview
% twitter oauth 1.0a: https://dev.twitter.com/docs/auth/authorizing-request
% https://dev.twitter.com/docs/auth/implementing-sign-twitter

% Better ux: app logo secure url: oauth pyynnön käyttäjälle näytettävällä sivulla voidaan esittää idc:n logo.



"This
  specification describes how to make protected resource requests when
  the OAuth access token is a bearer token."
http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-16
While designed for use with
   access tokens resulting from OAuth 2.0 Authorization
   [I-D.ietf-oauth-v2] flows to access OAuth protected resources, this
   specification actually defines a general HTTP authorization method
   that can be used with bearer tokens from any source to access any
   resources protected by those bearer tokens.




Selitetäänkö \verb!client_id!, \verb!response_type!, \verb!client_secret!, \verb!redirect_uri!, \verb!scope!, \verb!access_type!, \verb!approval_prompt!



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Analyzing OAuth
http://www.slideshare.net/oliverpfaff/analyzing-oauth-11014266

Venn-kaavio
IT-security  Auth/Authz/Federation   IAM (Identity and Access Management)

OAuth ais at a use case in cloud computing, SOA and Web 2.0 by addressing access control for composite applications:
- 3rd party apps accessing resources owned by individual users on their behalf
- wants to obsolete naive approaches
- has (at a first glance) analogies with approaches in enterprise IAM eg
  * 3rd party security protocols such as kerberos, saml
  * classical web access management
- development and standardization is currently ongoing in an ietf working group

komposiittiapplikaatio:
- appin omat tiedot + esim kuvia flickeristä
- ks Authenticating/AuthorizingCompositeApplications:
 " requests from 3rd-parties that are xplicitly entitled by John Doe may access resources of John Doe"
 sen sijaan että salasana

use case:
- facilitate access to protected (user) resources hosted in the network:
  via web apis
  by 3rd party apps
  on a discretional basis (controlled by resource owners)
  in a constrained way (time, functional scope)
  without revealing user credentials to 3rd parties
  independent of the means of user authentication deployed by services and 3rdparty apps

OAuth 1.0 (2007) emerged from propietary protocols such as Flickr API Auth, Google AuthSub
OAuth 1.0a v2009, korjasi session fixation attack
ietf-versio v2010, oauth core 1.0a + errata: rfc 5849

resurssin omistaja
 capable of delegatin access rights for protected resources to 3rd parties
 presenting a http client
 eg individual users (represented by their user agents)

intermediary
 requesting protected resources on behalf of resource owners
 presenting a http client and server
 eg composite apps

service
 hosting protected resources and responding to requests from intermediaries
 presenting a http server
 eg cloud services
(ks kuva)


credentials comprise pairs of a token and a key (shared-secret)
 provide means for request authentication purposes
 oauth2.0 supports bearer tokens. then the key portion is absent.
 (token[esim viivakoodi], key)
 token on identifier tai self-contained
 <---------credential-------->


exchanges for acquiring oauth credentials are called flows.

identity provisioning (eg spml, scim) and federation (eg saml, openid) enable the sharing of user identity in a persistent resp. transient fashion
oauth enaebles sharing of user resources - not user identity
- HMMMM
- SSO (eg. Kerberos) enables users to subsequently authenticate at multiple systems or applications and access them after a single initial authentication.
- OAuth allows services to authenticate 3rdparty apps as entities acting on behalf of a user - not as the actual user. <--------- kyllä, mutta mitä eroa openid:hen tältä osin?

using oauth in pseudo-authentication mode way produces authorization side-effects: access rights may be granted to intermediaries. it should not be used for federated login-only purposes.
" However, signing in to a web site that you do not know well using pseudo-authentication of OAuth is same as spreading your valet key everywhere and that is very dangerous. Now you see why many sites want OAuth “authentication” rather than OpenID. Having a valet key is much more useful than a referral letter to provide services or doing something bad for you."

resource owners need to trust intermediaries. intermediaries that are in posession of valid oauth credentials or that can obtain them may access protected resources of resource owners.

oauth, iam ja saml, ks. kalvo 23/57
ks conclusions kalvo 24/57

!!! ks kalvot 52 --->


alternative token form factors: identifier vs. self-contained tokens (various syntax options such as saml, jwt)
alternative token families (bearer vs proof)
decoupled lifetime for access right and token objects (refresh token)
extensible protocol abstractions (eg own authorization grant types)

OpenID Connect:
- jos oauth resurssintarjoaja ei rajoita scopella, voi asiakas saada liikaa valtuuksia vaikka piti tehdä pelkkä login. vaara asiakkaalle.

http://nat.sakimura.org/2011/05/15/dummys-guide-for-the-difference-between-oauth-authentication-and-openid/
http://nat.sakimura.org/2012/01/20/openid-connect-nutshell/

OpenID Connect is a distributed identity framework on top of OAuth that not only allows safe authentication but also make it possible for the sites to move the distributed data in the internet and provide better services.

It is very dangerous to randomly authenticate yourself to the sites using plain OAuth [*1]. Then, what should we do to authenticate safely and properly using OAuth? What about just handing a valet key to a locker that only has a copy of the letter of referral instead to your apartment?

In this case, even the worst happens, you only lose the copy of referral letter. The damage is not so different than the case of OpenID.

This indeed is the basic idea behind “OpenID Connect.”



OAuth 2.0 vs. Kerberos
3.  Functional Comparison of OAuth 2.0 and Kerberos V5
http://tools.ietf.org/html/draft-hardjono-oauth-kerberos-01#section-3


Anaylyzin OAuth 2.0
http://www.slideshare.net/oliverpfaff/analyzing-oauth-11014266





Eran Hammer was the lead author and editor of the OAuth specifications
\cite{hueniverse_oauth_intro}

OAuth on suunniteltu toimimaan ensisijaisesti HTTP-protokollalla~\cite{ietf_oauth2}.
Standardi jättää määrittelemättä OAuthin käytön muulla kuin HTTP-protokollalla.
OAuthin turvallisuus perustuu pitkälti HTTPS:n käyttämiseen.

''Bearer tokens: OAuth 2.0 provides a cryptography-free option for authentication which is based on existing cookie authentication architecture. Instead of sending signed requests using HMAC and token secrets, the token itself is used as a secret sent over HTTPS. This allows making API calls using cURL and other simple scripting tools without having to canonicalize the request and sign it.''
''Short-lived tokens with Long-lived authorizations: Instead of issuing a long lasting token (typically good for a year or unlimited lifetime), the server can issues a short-lived access token and a long lived refresh token. This allows clienta to obtain a new access token without having to involve the user again, but keeps access tokens limited. This feature was adopted from Yahoo!’s BBAuth protocol and later its OAuth 1.0 Session Extension.''

Mikä on bearer token type?
MAC:
 - family: proof
 - form-factor: identifier
Bearer:
 - family: bearer
 - form-factor: self-contained




 http://code.google.com/apis/accounts/docs/OAuth2.html

 http://code.google.com/apis/accounts/docs/OAuth2WebServer.html
 https://developers.facebook.com/docs/authentication/

 http://fireeagle.yahoo.net/developer/documentation/using_oauth

 http://developers.soundcloud.com/docs/api/authentication#refreshing



--------------------



\subsection{Uhat turvalliselle autentikoitumiselle (ohjelmistokehittäjän näkökulmasta)} % (fold)
\label{sec:uhat_turvalliselle_autentikoitumiselle}

  OAuth security token -tyypit:
  - Bearer vaatiin aina HTTPS:n.
  - Mac (vrt. token scheme oauth 1.0), turvallinen vaikkei suojattu yhteys. Vaatii keyn ja secretin, ja käyttää hashmacia kryptaamaan osan requestista. Seurauksena pyyntö valid ainoastaan jos molemmilla osapuolilla samat avaimet, kolmannen osapuolen ei ole mahdollista uudelleenluoda alkuperäistä requestia ilman validia salasanaa.
  - SAML Mahdollistaa SAML-assertioiden käytön. Mahdollistaa olemassaolevan SAML-toteutuksen hyödytämisen OAuthissa. (todo esimerkki milloin hyödyllinen, esim. sisäverkon active directory + julkinen web-palvelu)

  Mitkä on Pihvin kannalta oleellisimmat?
  OAuth draftin threat model -dokumentti.

  Haavoittuvuudet, jotka huomioitava, vaikka yhteys olisi suojattu HTTPS:llä:
  CSRF: OAuth draft kpl 10.12.: ''The client MUST implement CSRF protection for its redirection URI.''
  Clickjacking: Oauth draft kpl 10.13.
     ''To prevent this form of attack, native applications SHOULD use
     external browsers instead of embedding browsers in an iframe when
     requesting end-user authorization.''
  Code Injection ja Input Validation (kpl 10.14.)
  Open Redirectors (kpl 10.15.)

  Phishing ja selaimen omat vastatoimet.

% section uhat_turvalliselle_autentikoitumiselle (end)



---------------------

% *** 3-legged authorization: käyttäjältä kysytään AINA lupa vaikka app olisi auktorisoitu jo aiemmin. Ota kuva twitterin docseista. % https://dev.twitter.com/docs/auth/3-legged-authorization
%
% Jatkokehitysideoihin eclipsen auktorisoimiseksi:
% *** PIN Based authentication: Kun app ei voi embeddaa tai käyttää web-selainta käyttäjän uudelleenohjaamiseksi auktorisoinnin endpointtiin. Commandline-ohjelmat, embedded systems, pelikonsolit ja tietyntyyppiset mobiiliappsit. Toimii kuten normaali ja 3-legged, mutta oauth\_callbackin täytyy olla \verb!oob! POST oauth/request\_token -kutsussa. Kun app kehittänyt idp:n oauth/authenticate tai oauth/authorize URL:n, idc näyttää URL:n käyttäjälle joka syöttää sen käsin web-selaimeen. Idp autentikoi käyttäjän, mutta ei redirectaa takaisin appiin (koska käyttäjä avasi selaimen manuaalisesti). Sen sijaan idp tarjoaa PIN-koodin, jota idc seuraavaksi kysyy ja joka käyttäjän täytyy idc:lle syöttää. Ota kuva twitterin docseista. PIN-koodi annetaan \verb!oauth_verifier! arvona kun \verb!POST oauth/access_token!. Muut pyynnöt toimivat normaalisti.
%   % https://dev.twitter.com/docs/auth/pin-based-authorization





- In order to log the user into your site, three things need to happen. First, Facebook needs to authenticate the user. This ensures that the user is who they say they are. Second, Facebook needs to authenticate your website. This ensures that the user is giving their information to your site and not someone else. Lastly, the user must explicitly authorize your website to access their information. This ensures that the user knows exactly what data they are disclosing to your site.
- auktorisointipäätös käyttäjälle itselleen (ei automaatille)



---------------------------------

Poistettua kamaa:


% OAuth ja assertiot jos jaettu salaisuus client_id ja client_secret eivät tarpeeksi turvallisia.
%
% We modified our OAuth2 webserver flow implementation to accept assertions from the OAuth client,
% instead of sending client_id&client_secret. This is useful in some cases where long-lived
% client_id&client_secret are not considered strong enough. Here are the steps to use it:
% https://sites.google.com/site/oauthgoog/Home/google-oauth2-assertion-flow


%%%
implicit flow vs openid connect

mooc säilöö access tokeneita. jos maailmalla on asiakkaita jotka käyttävät implicit flowta autentikointiin, moocin säilömillä tiedoilla voi autentikoitua käyttäjän nimissä näihin palveluihin. access token ei sisällä tietoa siitä kenelle se on tarkoitettu. facebook tästä syystä signed request.
%
Ongelmana siis se, että jos mulla on jonkun muun access token (niin
kuin mulla on jos pidän palvelua johon sellaisella kirjaudutaan), niin
voin käyttää tuota access tokenia kenen tahansa muun palvelussa, jossa
autentikoidaan käyttäjä implicit flow'lla.
%
Implicit flow'ssa
web-selain välittää access tokenin http-pyynnön
authorization-headerissa, eli selain voi itse vaihtaa access coden.
Implicit flow'ssa resurssin palvelin ei pysty mitenkään tarkistamaan,
esittääkö access tokenin se tyyppi jolle se on alunperin myönnetty.
%
Facebook on fiksannut ongelman OAuth-standardista poikkeavalla
ratkaisulla. OpenID Connectin autentikointikerros rakentuu suoraan
OAuthin auktorisointikerroksen päälle ja korjaa tämän ongelman.
Spekuloin tässä, että kun openid connect valmistuu, facebook vaihtaa
nykyisestä oauth-standardista poikkeavan tavan openid connectiin.
Google ainakin vaikuttaa dokumentaationsa perusteella tekevänsä niin.
Nykyinen OpenID 2.0 on tuomittu, mutta OpenID Connect tulee!



% http://www.sakimura.org/2012/02/1487/
% \cite{sakimura_oauth_authentication_problem_2012}
% google translatella
%
% [2] signed_request, whereas the signature scheme are taking their own Facebook, OpenID Connect is using JWS has been standardized by the IETF JOSE WG. In addition, signed_request, but has put itself in the signed_request access_token, in OpenID Connect, consider the OAuth compatible with other 2.0 sites, we have to go out.
% Actually, this is Facebook have also noticed, Signed_request have a API called. This is almost the same as OpenID Connect [2]. In order to log in on Facebook, I do not have to use here. What I do is no scope = signed_request. But people who are using, how much do you stay? You do that? Most of the access token to get the client Side flow You do have I spent on behalf of authentication (the default of Facebook)? ! [7]
%  rather than writing code in their own (added 2/17), if you use a Javascript SDK of Facebook, is configured to use it signed_request. In addition, the difference from last year's July, and document, signed request had turned to enter that code rather than access_token. If using JS SDK is a lot of people, and if you did not write a code on their own, with respect to FB is that damage will not excessively so. However, Android SDK and iOS SDK is because it has no such measures, dangerous. This is, @ nov is raising an incident report to apple.



% Now you understand that it is very dangerous to randomly authenticate yourself to the sites using plain OAuth [*1]. Then, what should we do to authenticate safely and properly using OAuth? What about just handing a valet key to a locker that only has a copy of the letter of referral instead to your apartment?
% http://nat.sakimura.org/2011/05/15/dummys-guide-for-the-difference-between-oauth-authentication-and-openid/
% [*1] Indeed, twitter allowed any apps that the user authorized to read all his direct messages (DMs) until the end of June, 2011.
%
% In this case, even the worst happens, you only lose the copy of referral letter. The damage is not so different than the case of OpenID. This indeed is the basic idea behind “OpenID Connect.”
% OpenID Connect is a distributed identity framework on top of OAuth that not only allows safe authentication but also make it possible for the sites to move the distributed data in the internet and provide better services.



% OAuth-checklist http://oauthchecklist.org/:
% UX:
% Remove passwords from API calls
% Offer an easy way to revoke applications
% Offer detailed permissions, or scopes
%
% Development:
% Use a well tested OAuth library
% Offer the appropriate OAuth dance
% Document your OAuth implementation
%
% Security:
% Encrypt all OAuth credentials
% Generate verifiable consumer keys
% Throttle undesired usage

